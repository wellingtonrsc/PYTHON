# -*- coding: utf-8 -*-
"""ESTRUTURAS DE DADOS PYTHON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mEMsIpj77K1IQ3rHneCGPVP6XibVON_f

EXERCICIOS MODULO 2 - PYTHON DO ZERO

# > **Bloco com recuo**

1- Crie um programa que leia nome, sexo e idade de várias pessoas, guardando os dados de cada pessoa em um dicionário e todos os dicionários em uma lista. No final, mostre:

ESSE É UM PROGRAMA QUE LÊ O NOME , SEXO E IDADE DE VARIAS PESSOAS E GUARDAR OS DADOS DENTRO DE UM DICIONARIO  E LOGO APOS ELE IMPRIME QUANTAS PESSOAS FORAM CADASTRADAS, A MÉDIA DE IDADE DELAS, UMA LISTA SÓ DE MULHERES E UMA LISTA DE PESSOAS COM IDADE ACIMA DA MEDIA.

a) Quantas pessoas foram cadastradas :

b) A média de idade :

c) Uma lista com as mulheres :

d) Uma lista de pessoas com idade acima da média :
"""

pessoas = list()
pessoa = dict()
soma = média = 0
while True:
      pessoa.clear()                                                            #recebe uma pessoa nova
      pessoa['nome'] = str(input('nome: '))                                     #ira perguntar o nome
      while True:
          pessoa['sexo'] = str(input('sexo: [M/F] ')).upper()[0]                #perguntara o sexo e iremos usar só a primeira letra para saber se é masculino ou feminino
          if pessoa['sexo'] in 'MF':                                            #se o sexo da pesso não for m ou f para (break) e imprima o print abaixo
            break
          print('ERRO! Por favor digite m ou f')
      pessoa['idade'] = int(input('idade: '))                                   #ira perguntar a idade
      soma += pessoa['idade']
      pessoas.append(pessoa.copy())                                             #as pessoas cadastrada iram receber copia de pessoa
      while True:
          resposta = str(input('Quer continuar ? [S/N] ')).upper()[0]           #pergunta se quer continuar
          if resposta in 'SN':                                                  #se a resposta não for s ou n fazer o break...
            break
          print('Erro! Responda apenas S ou N.')                                #e imprimir o print
      if resposta =='N':                                                        #se a resposta for s (break)
          break
print('-=' * 30)                                                                #até essa linha é a leitura dos dados
print(f'A) Temos {len(pessoas)} pessoas cadastradas atualmente.')                 #ira mostrar o total de pessoas cadastradas         
média = soma / len(pessoas)
print(f'B) A média de idade é {média:5.2f} anos.')                               #vai imprimir a media de idade
print('C) As mulheres cadastradas foram: ' ,end='')                               #vaiimprimir uma lista de mulheres 
for p in pessoas:
  if p['sexo'] in 'Ff':                                                         #se o sexo for feminino imprimima nome
    print(f'{p["nome"]} ', end='')
print()
print('D) E aqui estão as pessoas que estão acima da média: ')                  #Vai imprimir as pessoas que estão com a idade acima da media
for p in pessoas:
  if p['idade'] >= média:                                                       #se a pessoa tiver igual o acima da média imprima as chaves(keys) e valores(values)
    print(' ', end='')
    for k, v in p.items():
      print(f'{k} = {v}; ',end='')
      print()

"""**2**- Escreva um programa Python para criar uma tupla com números de 1 a 4 e imprima um item :"""

tupla = (1, 2, 3, 4)        #criei uma tupla com numeros de 1 a 4
tupla[0]                    #e solicitei a impressão do numero na posição 0

"""3- Escreva um programa Python para desempacotar uma tupla em várias variáveis:
considere uma tupla = (‘aluno’,’universidade’, ‘nota’, ‘resultado’) e as variáveis w, x, y, z  
Consulte o tipo de dados de cada uma das variáveis e impriva os valores de cada uma delas :
"""

tupla = ('aluno', 'universidade', 'nota', 'resultado')
w = tupla[0]
x = tupla[1]
y = tupla[2]
z = tupla[3]
print (f'W corresponde : {w}, ' f'X corresponde : {x}, '  f'Y corresponde : {y}, 'f'Z corresponde : {z}')

"""4- Crie 3 conjuntos conforme estrutura a seguir: 

setx = set(["apple", "mango"]) 

sety = set(["mango", "orange"])**negrito**

setz = set(["mango"]) 

Faça as seguintes operações sobre conjuntos:

a) Faça a união dos três conjuntos e imprima o resultado: ok

b) Verifique quais os elementos comuns do conjunto setx e sety e imprima o resultado:

c) Verifique se o conjunto setx é subconjunto do conjunto sety e setz utilizando issubset():  

d) Verifique quais elementos do conjunto setx não existem em sety
"""

setx = set(['apple','mango'])
sety = set(['mango','orange'])
setz = set(['mango'])

a = setx | sety | setz
b = setx & sety
c = setx <= sety and setz
d = setx - sety

print (f'A) Esse é o resultado da união dos tres conjuntos : {a}')
print (f'B) Esses são os elementos comuns entre o setx e sety : {b}')
print (f'C) setx é subconjunto do conjunto sety e setz ? {c}')
print (f'D) Esses são os elemnetos que existem no setx e não existem no sety : {d}')

"""5 - Escreva um programa Python para inserir um elemento no início de um determinado DicionárioOrdenado.
 
 

DicionárioOrdenado original: 

DicionárioOrdenado ([('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')]) 

Insira um elemento no início do referido DicionárioOrdenado: 

DicionárioOrdenado atualizado: 

DicionárioOrdenado ([('color4', 'Orange'), ('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')]) 

"""

DicionárioOrdenado = ([('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')]) 
DicionárioOrdenadoatualizado = ([('color4', 'Orange'), ('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')])
DicionárioOrdenado = DicionárioOrdenadoatualizado
print (DicionárioOrdenado)

"""6- Escreva uma função chamada right_justify, que receba uma string chamada s como parâmetro e exiba a string com espaços suficientes à frente para que a última letra da string esteja na coluna 70 da tela: 

right_justify('monty') 

Dica: Use concatenação de strings e repetição. Além disso, o Python oferece uma 
função integrada chamada len, que apresenta o comprimento de uma string, então o valor de len('monty') é 5. 
"""

function = ("ola mundo")
print (function.rjust(70))

"""7- Um objeto de função é um valor que pode ser atribuído a uma variável ou passado como argumento. Por exemplo, do_twice é uma função que toma um 
objeto de função como argumento e o chama duas vezes: 

def do_twice(f): 

f() 

f() 

Aqui está um exemplo que usa do_twice para chamar uma função chamada print_spam duas vezes: 

def print_spam():

print('spam') 

do_twice(print_spam) 

a) Digite este exemplo em um script e teste-o. 

b) Altere do_twice para que receba dois argumentos, um objeto de função e um valor, e chame a função duas vezes, passando o valor como um argumento. 



"""

from __future__ import print_function, division

def do_twice(func, arg):
    func(arg)
    func(arg)


def print_twice(arg):
    print(arg)
    print(arg)


def do_four(func, arg):
    do_twice(func, arg)
    do_twice(func, arg)

do_twice(print, 'spam')
print('')

do_four(print, 'spam')

"""8- Dada uma lista encadeada de caracteres formada por uma sequência alternada de letras e dígitos, construa um método que retorne uma lista na qual as letras são mantidas na sequência original e os dígitos são colocados na ordem inversa. Exemplos: 

A 1 E 5 T 7 W 8 G → A E T W G 8 7 5 1 

3 C 9 H 4 Q 6 → C H Q 6 4 9 3 

Como mostram os exemplos, as letras devem ser mostradas primeiro, seguidas dos dígitos. Sugestões:  


a) usar uma fila e uma pilha; 

b) supor um método ehDigito() que retorna um valor booleano, como por exemplo, verdadeiro caso um caractere seja um dígito.  
"""

#vou usar esse exemplo A 1 E 5 T 7 W 8 G 

def retorna_lista(lista):

  letras=['A','E','T','W','G']
  numeros=[1,5,7,8]
  for i in lista:
    if i.isnumeric():
        numeros.append(i)
    else:
      letras.append(i)
  numeros.reverse()
  return letras + numeros