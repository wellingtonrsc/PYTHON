# -*- coding: utf-8 -*-
"""MACHINE LEARNING

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H2jqso4czwWs2DeyfgWW1iUc_DQIYF0z

# **PROJETO DE MACHINE LEARNING**

Em nossas aulas, conhecemos os principais conceitos de Machine Learning, as
principais motivações e desafios para o desenvolvimento de algoritmos da área.
Nós também conhecemos as principais etapas para o desenvolvimento de um
modelo de Machine Learning e conhecemos um modelo de classificação de
imagens de dígitos manuscritos, utilizando a base de dados Mnist Dataset.

Para este projeto, considere o exemplo dado em relação a classificação de dígitos
manuscritos com SVM. Trata-se de um problema de classificação bastante
conhecido para os primeiros passos relacionados ao Aprendizado de Máquina.
Considerando este contexto, faça o que se pede:

1 – Crie um modelo de classificação de imagens, a partir da importação da base
de dados do Sci-kit Learn. Este modelo deve ter as seguintes características:

a) Utilize a base de dados Mnist Dataset

b) Divida a base de treinamento e teste em 80/20.

c) Utilize a técnica de Cross Validation (K-fold = 5)

d) Utilize a técnica de Random Search ou Grid Search para escolha dos melhores
parâmetros

e) Faça a impressão da matriz de confusão para o modelo

Obs: Fique a vontade para usar outras bibliotecas
"""

# importando as bibliotecas
import matplotlib.pyplot as plt

# import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split

# importa o mnist dataset
digits = datasets.load_digits()

_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, label in zip(axes, digits.images, digits.target):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title('Training: %i' % label)

#Classificando com SVM

# trabalhando com os dados acima
n_samples = len(digits.images)
#transformando a matriz em um vetor e amarzenando na variavel
data = digits.images.reshape((n_samples, -1))

# iniciando o classfificador SVM
clf = svm.SVC(gamma=0.001)

# Dividindo o conjunto de teste e treinamento em 80/20
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)

#A partir desse momento o nosso algoritimo tenta aprender
clf.fit(X_train, y_train)

#a maior quantidade de acertos revela que nosso algoritimo funcionou
predicted = clf.predict(X_test)

predicted

#mostrando o valor de dígito previsto.
print(f"Classification report for classifier {clf}:\n"
      f"{metrics.classification_report(y_test, predicted)}\n")

#importante o pacote para salvar o modelo
import pickle
#salvando o modelo
modelo_treinado = pickle.dumps(clf)

#carregando o modelo treinado
modelo_carregado = pickle.loads(modelo_treinado)
modelo_carregado.predict(data[0:1])

#Olhando o conteúdo de um vetor de teste
X_test[0]

#fazendo predição do novo dado com o modelo carregado
modelo_carregado.predict([X_test[0]])

# impressão da matriz de confusão para o modelo
disp = metrics.plot_confusion_matrix(clf, X_test, y_test)
disp.figure_.suptitle("Confusion Matrix")
print(f"Confusion matrix:\n{disp.confusion_matrix}")

plt.show()

"""2 – Faça uma pesquisa para conhecer um pouco mais sobre o universo de
Machine Learning e responda as questões a seguir:

a) Qual é a diferença entre um parâmetro de modelo e um algoritmo de
aprendizagem de hiperparâmetro?

```
R: Parâmetros do modelo são algo que um modelo aprende por si próprio. 
Por exemplo, 1) Pesos ou coeficientes de variáveis ​​independentes no modelo de regressão linear. 2) 
Pesos ou coeficientes de variáveis ​​independentes SVM. 3) Pontos de divisão na Árvore de Decisão.

Os hiperparâmetros do modelo são usados ​​para otimizar o desempenho do modelo. 
Por exemplo, 1) Kernel e folga no SVM. 2) Valor de K em KNN. 3) Profundidade 
da árvore nas árvores de decisão.


```

b) Você pode citar quatro dos principais desafios do aprendizado de máquina?

```
R:
▪ Insuficiente quantidade de dados de treinamento
▪ Dados de treinamento não representativos
▪ Qualidade dos dados ruins
▪ Características irrelevantes dos dados
```

c) Se o seu modelo tem um ótimo desempenho nos dados de treinamento, mas generaliza mal para novas instâncias, o que está acontecendo? Você pode citar três soluções possíveis?

```
R: Creio que isso deve a Qualidade de dados ruins que não ajudam a maquina a aprender ou 
até mesmo muitos dados que a maquina não consegue acompanhar mais conhecido como 
(overfitting e underfitting).
Uma solução para esse caso seria correto utilizar a deep learning, autulizar os dados de treinamento 
ou até mesmo substituilos por algo mais consistente.
```

d) O que é um conjunto de teste e por que você deveria usa-lo?

```
R: Conjunto de teste é a formar que vemos o quanto o nosso programa aprendeu,
com os dados de treinamento. ele sempre deve ser usado para que tudo ocorra bem com seu  programa.
```

e) Qual é o propósito de um conjunto de validação?

```
R: Dividir o conjunto de treino em algumas partes, dentro desse conjunto ele
faz um treinamento e uma validação ou seja o proposito é treinar e validar varias vezes o seu programa.
```

f) O que pode dar errado se você ajustar hiperparâmetro usando o conjunto de teste?

```
R:  É muito comum que aqueles que estão no topo da tabela de classificação no 
final da competição sejam muito baixos na classificação final com base nos dados do teste. 
Isso ocorre porque eles ajustaram os hiperparâmetros em seus 
sistemas de aprendizado para maximizar seu desempenho na tabela de 
classificação e, ao fazer isso, ajustaram demais os dados de validação ajustando o modelo deles.
```
"""